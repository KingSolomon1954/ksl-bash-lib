KSL_BASH_LIB
------------
TODO: form a releaseable ksl shell library
TODO: consider https://github.com/bats-core/bats-core for testing
TODO: multi-layered config feature, yaml parsing
TODO: Readme.md needs updates for release and installation
TODO: Investigate [Keep a Changelog](http://keepachangelog.com/en/1.0.0/
TODO: etc/changelog.md
git config user.name github-actions[bot]
git config user.email 41898282+github-actions[bot]@users.noreply.github.com

Done: add shellcheck https://github.com/koalaman/shellcheck
Done: automation using shdoc embedded comments https://github.com/reconquest/shdoc
Done: consider doxygen-bash for documentation- nope - https://github.com/Anvil/bash-doxygen/blob/master/README.md
Done: docs for libError
Done: docs for libEnv
Done: GitHub pages job to host docs
Done: add publish docs target
Done: docs for libArrays
Done: docs for libColors
Done: docs for libFiles
Done: docs for libStdOut
Done: docs for libStrings
Done: Initial Readme.md


main
    checkin/merge/PR to main does not trigger a release
    main can advance many times without triggering a release
    checkin/merge/PR always builds, tests, gen docs. All must pass.
    docs are always copied to docs/site and checked in
    But GH pages stays unchanged with latest release docs until newer release
    therefore docs/site is only deployed to GH pages when releasing

    There is only one build action, runs on all branches including
    main upon pushing.
    
    There is a second build action that runs upon release.


Release Process
---------------
Create a branch called "release" off of the latest main
Manually issue one of:
    make pre-release-major
    make pre-release-minor
    make pre-release-patch

Confirm the release artifacts look good
    Examine version file
    Examine changelog
    Examine docs with new version
    Examine tarball
    Confirm test-tarball passed

Commit changes to release branch
Open PR to merge to main, PR title must start with "Release:"

Release pipeline triggers based on main branch and title of "Release:"
    runs unit tests
    make docs; make docs-publish
    obtains version from version file
    creates the release tarball (again)
    tests the release tarball (again)
    pushes tarball to Github Release
    tags the release commit with version number
    git tag -a "v1.2.3" -m "Release: $version"
    deploys docs to GH pages


For automated changelog generation, use these:

feat:
chore:
fix:
style:
release:
test:
docs:
refactor:
ci:
