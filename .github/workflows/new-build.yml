# ----------------------------------------------
#
# Builds and possibly performs a release
#
# This runs on all branches including main.
#
# Performs additional release actions if the following
# conditions are met:
# 
#     * we're executing on the main branch
#     * triggered by a closing pull_request
#     * the head commit starts with "Release: [major|minor|patch]"
# 
# ----------------------------------------------

name: Build
run-name: Build ${{ github.event.head_commit.message }}

on:
  push:
    paths-ignore:
      - docs/site/**
      - ./version
      - etc/changelog
    
  pull_request:
    branches:
      - main
      
  # Allow manually triggering from GitHub Actions tab
  workflow_dispatch:
    
# Sets permissions of the GITHUB_TOKEN to allow writing
# back to the repository (see docs-publish setp below).
permissions:
  contents: write
  
jobs:

  Build:
    runs-on: ubuntu-latest

    steps:
      - name: Install podman
        run:  sudo apt install -y podman
        
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run unit tests
        run:  |
          echo make unit-test
          echo "commit message: ${{ github.event.head_commit.message }}"
          echo "executing on branch: ${{ github.ref_name }}"

      - name: Determine if release build
        id: test_for_release
        run: |
          do_release="no"
          if [[ ${{ github.event_name == 'pull_request' }} ]]; then \
              if ${{ github.event.action == 'closed' }}; then \
                  if ${{ startsWith(github.event.head_commit.message, 'Release:') }}; then \
                      do_release="yes"; \
                  fi; \
              fi; \
          fi
          echo "do_release=$do_release" >> ${GITHUB_OUTPUT}
          
#          if ${{ startsWith(github.event.head_commit.message, 'Release:') }}; then \
#              if [[ ${{ github.ref_name == 'CreateReleases' }} ]]; then \
#                  echo "do_release=true"  >> ${GITHUB_OUTPUT}; \
#              else \
#                  echo "do_release=false" >> ${GITHUB_OUTPUT}; \
#              fi; \
#          fi
#

      - name: Bump version number (release-only)
        if: ${{ steps.test_for_release.outputs.do_release == 'yes' }}
        run:  |
          bump_level=$(echo "${{ github.event.head_commit.message }}" | awk '{ print $2 }')
          make BUMP=$bump_level bump-version

      - name: Build docs
        run:  echo make docs

      - name: Publish docs
        run:  echo make docs-publish

      - name: Create changelog (release-only)
        if: ${{ steps.test_for_release.outputs.do_release == 'yes' }}
        run: make update-changelog

      - name: Create tarball
        run:  echo make create-tarball

      - name: Test tarball
        run:  make test-tarball
        
      - name: Checkin docs (release-only)
        if: ${{ steps.test_for_release.outputs.do_release == 'yes' }}
        # Performs a git checkin on docs.
        # Hence we need the paths-ignore specification
        # at top of this action to prevent a build loop. 
        # Plus needs "contents" permission to write to repo.
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name ${{ github.actor }}
          git add -A docs/site
          echo howie git commit -m "Publish documentation"
          echo howie git push

      - name: Obtain version and tag (release-only)
        if: ${{ steps.test_for_release.outputs.do_release == 'yes' }}
        run: echo "Obtain version and tag"

      - name: Push tarball to Github Release (release-only)
        if: ${{ steps.test_for_release.outputs.do_release == 'yes' }}
        run: echo "Pushing tarball to Github Release"
        
      - name: Tag the release at the current commit (release-only)
        if: ${{ steps.test_for_release.outputs.do_release == 'yes' }}
        run: |
          echo "Tagging release"
          echo howie git tag -a "v1.2.3" -m "Release: $version"
          echo howie git push --follow-tags
          
